# -*- coding: utf-8 -*-
"""Ai_resume_analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1osdkeQqoAlc7OHXQHowQMC8Bp9NslJgq
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install pdfplumber pytesseract pdf2image

import pdfplumber
import pytesseract
from pdf2image import convert_from_path

def extract_text_from_pdf(pdf_path):
    text = ""
    try:
        # Try direct text extraction
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text

        if text.strip():
            return text.strip()
    except Exception as e:
        print(f"Direct text extraction failed: {e}")

    # Fallback to OCR for image-based PDFs
    print("Falling back to OCR for image-based PDF.")
    try:
        images = convert_from_path(pdf_path)
        for image in images:
            page_text = pytesseract.image_to_string(image)
            text += page_text + "\n"
    except Exception as e:
        print(f"OCR failed: {e}")

    return text.strip()

from google.colab import files
uploaded = files.upload()

pdf_path = "Resume.pdf.pdf"
resume_text = extract_text_from_pdf(pdf_path)

print("\nExtracted Text from PDF:")
print(resume_text)

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
# %pip install google.generativeai python-dotenv

import google.generativeai as genai
import os
from dotenv import load_dotenv

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-flash")

response = model.generate_content("What is the capital of India?")

print(response)

print(response.text)

def analyze_resume(resume_text, job_description=None):
    if not resume_text:
        return {"error": "Resume text is required for analysis."}

    model = genai.GenerativeModel("gemini-1.5-flash")

    base_prompt = f"""
    You are an experienced HR with Technical Experience in the field of any one job role from Data Science, Data Analyst, DevOPS, Machine Learning Engineer, Prompt Engineer, AI Engineer, Full Stack Web Development, Big Data Engineering, Marketing Analyst, Human Resource Manager, Software Developer your task is to review the provided resume.
    Please share your professional evaluation on whether the candidate's profile aligns with the role.ALso mention Skills he already have and siggest some skills to imorve his resume , alos suggest some course he might take to improve the skills.Highlight the strengths and weaknesses.

    Resume:
    {resume_text}
    """

    if job_description:
        base_prompt += f"""
        Additionally, compare this resume to the following job description:

        Job Description:
        {job_description}

        Highlight the strengths and weaknesses of the applicant in relation to the specified job requirements.
        """

    response = model.generate_content(base_prompt)

    analysis = response.text.strip()
    return analysis

print(analyze_resume(resume_text))

from google.colab import files
uploaded = files.upload()

!pip install streamlit pyngrok pdfplumber pytesseract pdf2image google-generativeai python-dotenv
!apt-get install -y poppler-utils tesseract-ocr

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pdfplumber
# import pytesseract
# from pdf2image import convert_from_path
# import os
# import google.generativeai as genai
# from dotenv import load_dotenv
# 
# load_dotenv()
# genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
# model = genai.GenerativeModel("gemini-1.5-flash")
# 
# def extract_text_from_pdf(pdf_path):
#     text = ""
#     try:
#         with pdfplumber.open(pdf_path) as pdf:
#             for page in pdf.pages:
#                 page_text = page.extract_text()
#                 if page_text:
#                     text += page_text
#         if text.strip():
#             return text.strip()
#     except:
#         pass
# 
#     try:
#         images = convert_from_path(pdf_path)
#         for image in images:
#             page_text = pytesseract.image_to_string(image)
#             text += page_text + "\n"
#     except Exception as e:
#         st.error(f"OCR failed: {e}")
# 
#     return text.strip()
# 
# def analyze_resume(resume_text, job_description=None):
#     base_prompt = f"""
#     You are an experienced HR...
#     Resume:
#     {resume_text}
#     """
#     if job_description:
#         base_prompt += f"\nJob Description:\n{job_description}"
# 
#     response = model.generate_content(base_prompt)
#     return response.text
# 
# st.title("AI Resume Analyzer")
# 
# uploaded_file = st.file_uploader("Upload Resume (PDF)", type=["pdf"])
# job_desc = st.text_area("Optional: Paste Job Description")
# 
# if uploaded_file is not None:
#     with open("resume.pdf", "wb") as f:
#         f.write(uploaded_file.read())
# 
#     extracted_text = extract_text_from_pdf("resume.pdf")
#     if extracted_text:
#         st.subheader("Extracted Resume Text")
#         st.text_area("Resume Text", extracted_text, height=200)
# 
#         if st.button("Analyze Resume"):
#             result = analyze_resume(extracted_text, job_desc)
#             st.subheader("Resume Analysis")
#             st.markdown(result)
#     else:
#         st.warning("Could not extract text from the uploaded PDF.")
#

from pyngrok import ngrok

# Paste your token here
ngrok.set_auth_token("2ygiU6D2Z81tJq9dGpbnZscW1Bp_2gfVLY7bwGEnZoFxvzV4L")

from pyngrok import ngrok

# Start your Streamlit app
!streamlit run app.py &>/content/logs.txt &

# Expose it via ngrok correctly
public_url = ngrok.connect("http://localhost:8501")
print(f"ðŸ”— Open this Streamlit App: {public_url}")